# Production Nginx configuration with SSL support
user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

# Events block
 events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;
    server_tokens off;

    # SSL configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers off;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;

    # HSTS (uncomment if you're sure)
    # add_header Strict-Transport-Security "max-age=63072000" always;

    # Gzip compression
    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    gzip_min_length 256;    # Main server block for HTTP - handles Let's Encrypt challenges
    server {
        listen 80;
        server_name ${DOMAIN}; # Will be replaced by environment variable

        # Rate limiting zone
        limit_req_zone $binary_remote_addr zone=one:10m rate=30r/m;
        limit_req zone=one burst=10 nodelay;

        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

        location / {
            return 301 https://$host$request_uri;
        }
    }

    # Main server block with SSL
    server {
        listen 443 ssl http2;
        server_name ${DOMAIN}; # Will be replaced by environment variable
        
        # SSL Certificate paths for Let's Encrypt
        ssl_certificate /etc/letsencrypt/live/${DOMAIN}/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/${DOMAIN}/privkey.pem;
        
        # Additional security headers
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

        root   /usr/share/nginx/html;
        index  index.html;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Permissions-Policy "geolocation=(), microphone=()" always;
        add_header Content-Security-Policy "
          default-src 'self';
          script-src 'self' 'unsafe-inline';
          style-src 'self' 'unsafe-inline' https://fonts.googleapis.com;
          font-src 'self' data: https://fonts.gstatic.com;
          img-src 'self' data: https://res.cloudinary.com https://example.com;
          connect-src 'self' https: http://localhost:8080;
          object-src 'none';
          frame-ancestors 'self';
          base-uri 'self';
          upgrade-insecure-requests;
        " always;

        # Serve static files
        location / {
            try_files $uri /index.html;
        }

        # Deny access to hidden files
        location ~* /\.(?!well-known)(.*)$ {
            deny all;
        }
    }
}
